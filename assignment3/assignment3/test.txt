    1|       |//
    2|       |//  main.cpp
    3|       |//  assignment3
    4|       |//
    5|       |//  Created by Devin Sevy on 1/16/19.
    6|       |//  Copyright Â© 2019 Devin Sevy. All rights reserved.
    7|       |//
    8|       |
    9|       |#include <iostream>
   10|       |#include <vector>
   11|       |#include <math.h>
   12|       |#include <iomanip>
   13|      4|#define PI 3.14159265
   14|       |using namespace std;
   15|       |
   16|       |struct slopes {
   17|       |    double slopeAB;
   18|       |    double slopeBC;
   19|       |    double slopeCD;
   20|       |    double slopeDA;
   21|       |};
   22|       |struct dists {
   23|       |    double distAB;
   24|       |    double distBC;
   25|       |    double distCD;
   26|       |    double distDA;
   27|       |};
   28|       |double findSlope(double x1, double y1, double x2, double y2);
   29|       |double findDist(double x1, double y1, double x2, double y2);
   30|       |struct slopes slopeStruct(double xB, double yB, double xC, double yC, double xD, double yD);
   31|       |struct dists distsStruct(double xB, double yB, double xC, double yC, double xD, double yD);
   32|       |bool isParallelograms(struct slopes& slope);
   33|       |bool isTrapezoid(slopes &slope);
   34|       |bool isSquareOrRhom(dists &dist);
   35|       |bool isSquare(dists &dist);
   36|       |void printShape(slopes &slope, dists &dist);
   37|       |
   38|       |double xB, yB, xC, yC, xD, yD;
   39|       |
   40|      1|int main(int argc, const char * argv[]) {
   41|      1|    // Square
   42|      1|    xB = 6; yB = 0; xC = 6; yC = 6; xD = 0; yD = 6;
   43|      1|    struct slopes slope = slopeStruct(xB, yB, xC, yC, xD, yD);
   44|      1|    struct dists dist = distsStruct(xB, yB, xC, yC, xD, yD);
   45|      1|    printShape(slope, dist);
   46|      1|    
   47|      1|    // Rectangle
   48|      1|    xB = 6; yB = 0; xC = 6; yC = 10; xD = 0; yD = 10;
   49|      1|    slope = slopeStruct(xB, yB, xC, yC, xD, yD);
   50|      1|    dist = distsStruct(xB, yB, xC, yC, xD, yD);
   51|      1|    printShape(slope, dist);
   52|      1|    
   53|      1|    // Rhombus
   54|      1|    xB = 5; yB = 0; xC = 8; yC = 4; xD = 3; yD = 4;
   55|      1|    slope = slopeStruct(xB, yB, xC, yC, xD, yD);
   56|      1|    dist = distsStruct(xB, yB, xC, yC, xD, yD);
   57|      1|    printShape(slope, dist);
   58|      1|    
   59|      1|    // Trapezoid
   60|      1|    xB = 6; yB = 0; xC = 4; yC = 5; xD = 2; yD = 5;
   61|      1|    slope = slopeStruct(xB, yB, xC, yC, xD, yD);
   62|      1|    dist = distsStruct(xB, yB, xC, yC, xD, yD);
   63|      1|    printShape(slope, dist);
   64|      1|    
   65|      1|    // Kite
   66|      1|    xB = 6; yB = 0; xC = 8; yC = 4; xD = 2; yD = 6;
   67|      1|    slope = slopeStruct(xB, yB, xC, yC, xD, yD);
   68|      1|    dist = distsStruct(xB, yB, xC, yC, xD, yD);
   69|      1|    printShape(slope, dist);
   70|      1|    return 0;
   71|      1|}
   72|       |
   73|      5|struct slopes slopeStruct(double xB, double yB, double xC, double yC, double xD, double yD) {
   74|      5|    struct slopes slope;
   75|      5|    
   76|      5|    slope.slopeAB = findSlope(0, 0, xB, yB);
   77|      5|    slope.slopeBC = findSlope(xB, yB, xC, yC);
   78|      5|    slope.slopeCD = findSlope(xC, yC, xD, yD);
   79|      5|    slope.slopeDA = findSlope(xD, yD, 0, 0);
   80|      5|    
   81|      5|    return slope;
   82|      5|}
   83|       |
   84|      5|struct dists distsStruct(double xB, double yB, double xC, double yC, double xD, double yD) {
   85|      5|    struct dists dist;
   86|      5|    
   87|      5|    dist.distAB = findDist(0, 0, xB, yB);
   88|      5|    dist.distBC = findDist(xB, yB, xC, yC);
   89|      5|    dist.distCD = findDist(xC, yC, xD, yD);
   90|      5|    dist.distDA = findDist(xD, yD, 0, 0);
   91|      5|    
   92|      5|    return dist;
   93|      5|}
   94|       |
   95|     20|double findSlope(double x1, double y1, double x2, double y2) {
   96|     20|    double slope = ((y2 - y1)/(x2 - x1));
   97|     20|    if(slope == +INFINITY || slope == -INFINITY) slope = 0;
   98|     20|    return slope;
   99|     20|}
  100|       |
  101|     20|double findDist(double x1, double y1, double x2, double y2) {
  102|     20|    double powX = pow((x2 - x1), 2);
  103|     20|    double powY = pow((y2 - y1), 2);
  104|     20|    double dist = sqrt((powX + powY));
  105|     20|    return dist;
  106|     20|}
  107|       |
  108|      5|bool isParallelograms(slopes &slope) {
  109|      5|    if(slope.slopeAB == slope.slopeCD && slope.slopeBC == slope.slopeDA) return true;
  110|      2|    return false;
  111|      2|}
  112|       |
  113|      2|bool isTrapezoid(slopes &slope) {
  114|      2|    if(slope.slopeAB == slope.slopeCD && slope.slopeBC != slope.slopeDA) return true;
  115|      1|    else if(slope.slopeAB != slope.slopeCD && slope.slopeBC == slope.slopeDA) return true;
  116|      1|    return false;
  117|      1|}
  118|       |
  119|      3|bool isSquareOrRhom(dists &dist) {
  120|      3|    double sideTotal = 4 * dist.distAB;
  121|      3|    double sum = dist.distAB + dist.distBC + dist.distCD + dist.distDA;
  122|      3|    if(sideTotal == sum) return true;
  123|      1|    return false;
  124|      1|}
  125|       |
  126|      2|bool isSquare(dists &dist) {
  127|      2|    int ang1 = atan((dist.distDA/dist.distAB)) * (180/PI);
  128|      2|    int ang2 = atan((dist.distCD/dist.distBC)) * (180/PI);
  129|      2|
  130|      2|    if((ang1 + ang2) == 90.000) return true;
  131|      0|    return false;
  132|      0|}
  133|       |
  134|      5|void printShape(slopes &slope, dists &dist) {
  135|      5|    if(isParallelograms(slope)) {
  136|      3|        if(isSquareOrRhom(dist)) {
  137|      2|            if(isSquare(dist)) cout << "Square" << endl;
  138|      0|            else cout << "Rhombus" << endl;
  139|      2|        } else {
  140|      1|            cout << "Rectangle" << endl;
  141|      1|        }
  142|      3|    } else {
  143|      2|        if(isTrapezoid(slope)) cout << "Trapezoid" << endl;
  144|      1|        else cout << "Kite" << endl;
  145|      2|    }
  146|      5|}